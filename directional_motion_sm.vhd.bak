library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

------------------------------------------------------------------------------
--TODO
--1. fix S0 and s3 so position changes only(or primarily) occur in decoder block
--2. Create simulation to test your garbage code
--3. make sure there are no abrupt changes in position (ie current_position should be shown to increment)
------------------------------------------------------------------------------

Entity directional_motion_sm is port 
	(
		clk		: in std_logic := '0';
		reset_n		: in std_logic := '0';
		motion_button		: in std_logic := '0';
		position_feed		: in std_logic_vector(3 downto 0);
		current_position : out std_logic_vector(4 downto 0);
		in_motion : out std_logic;
	);
	end Entity;
	
 Architecture SM of directional_motion is
 
 ------------------------------------------------------------------------------
 --Components Section
 ------------------------------------------------------------------------------
-- component U_D_Bin_Countrer4bit
--
--
-- 	port (
--			CLK		: in std_logic := '0';
--			RESET_n		: in std_logic := '0';
--			CLK_EN		: in std_logic := '0';
--			UP1_DOWN0		: in std_logic := '0';
--			COUNTER_BITS		: out std_logic_vector(4 downto 0)
--			);
--end component;

component compx4 is
 	port (
			four_bit_a_in, four_bit_b_in 	: in std_logic_vector(3 downto 0);
			a_equal_b, a_lesser_b, a_great_b		: out std_logic
		   
			);
end component;
 
 ------------------------------------------------------------------------------
 ------------------------------------------------------------------------------
 
 ------------------------------------------------------------------------------
 -- Defining types and signals
 --------------------------------
  
 TYPE STATE_NAMES IS (S0, S1, S2, S3);   -- list all the STATE_NAMES values
 
 SIGNAL current_state, next_state	:  STATE_NAMES;     	-- signals of type STATE_NAMES
 
 SIGNAL position, target_position, next_target_position, position_plus, position_minus : std_logic(3 downto 0);
 
 SIGNAL greater, less, equal : std_logic;

 ------------------------------------------------------------------------------
 ------------------------------------------------------------------------------
 
Register_Section: PROCESS (clk, motion_button, reset)  -- this process synchronizes the activity to a clock
BEGIN
	
	IF (reset = '0') THEN
		current_state <= S3;
		position <= '0000';	
	
	ELSIF(rising_edge(clk) ) THEN
		IF ((in_motion='0') AND NOT(next_target_position='0000')) THEN --when arm isnt moving and there is a next target 
			in_motion <= '1';
			target_position <= next_target_position;
			next_target_position <= '0000';
			current_state <= S0;
			
		ELSIF(in_motion='1') THEN --when arm is moving
			current_state <= next_State;
			
		END IF;
	END IF;
	
	IF (falling_edge(motion_button)) -- if the button is pressed at any time qeue that position
		next_target_position <= position_feed;
	END IF;
END PROCESS;

-- TRANSITION LOGIC PROCESS

Transition_Section: PROCESS (position, current_state) 

BEGIN
	
		comp : compx4 port map (position, target_position, equals, less, greater);
	
     CASE current_state IS
          WHEN S0 =>		
				IF(less='1') THEN
					next_state <= S1;
				ELSIF(greater='1')
					next_state <= S2;
				ELSE
					next_state <= S3
				END IF;
			
			WHEN S1 =>		
				IF(less='1') THEN
					next_state <= S1;
				ELSE
					next_state <= S0
			
			WHEN S2 =>		
				IF(greater='1')
					next_state <= S2;
				ELSE
					next_state <= S0
			
			WHEN S3 =>		
				next_state <= S3
	END CASE;

 END PROCESS;

-- DECODER SECTION PROCESS (Moore Form)

Decoder_Section: PROCESS (current_state) 

BEGIN
		
     CASE current_state IS
	      WHEN S0 =>		
			current_position <= position;
			
         WHEN S1 =>		
			current_position <= position+1;

         WHEN S2 =>		
			current_position <= position-1;
			
         WHEN S3 =>		
			current_position <= '0000';
			in_motion <= '0';

         
  END CASE;
 END PROCESS;

 END ARCHITECTURE SM;